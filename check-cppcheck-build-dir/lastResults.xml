<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.88"/>
    <errors>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;empty&amp;#039;." verbose="Non-pure function: &amp;#039;empty&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.cpp" line="9306"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.cpp" line="1201"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;WindowPadding&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;WindowPadding&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.cpp" line="1135"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.cpp" line="1950"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.cpp" line="1951"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.cpp" line="4623"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.cpp" line="6203"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.cpp" line="9594"/>
        </error>
        <error id="duplicateAssignExpression" severity="style" msg="Same expression used in consecutive assignments of &amp;#039;pad_l&amp;#039; and &amp;#039;pad_r&amp;#039;." verbose="Finding variables &amp;#039;pad_l&amp;#039; and &amp;#039;pad_r&amp;#039; that are assigned the same expression is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.cpp" line="5109" info=""/>
            <location file="include\IMGUI\imgui.cpp" line="5108" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;style&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;style&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.cpp" line="4730"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.cpp" line="4770"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.cpp" line="7005"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.cpp" line="8565"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.cpp" line="8838"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.cpp" line="9436"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;c&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;c&amp;#039; is assigned a value that is never used." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.cpp" line="1632"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;args_copy&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;args_copy&amp;#039; used before va_start() was called." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.cpp" line="2211"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;args_copy&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;args_copy&amp;#039; used before va_start() was called." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.cpp" line="2216"/>
        </error>
        <error id="objectIndex" severity="warning" msg="The address of local variable &amp;#039;x&amp;#039; might be accessed at non-zero index." verbose="The address of local variable &amp;#039;x&amp;#039; might be accessed at non-zero index." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.h" line="179" info="Address of variable taken here."/>
            <location file="include\IMGUI\imgui.h" line="179" info=""/>
        </error>
        <error id="objectIndex" severity="warning" msg="The address of local variable &amp;#039;x&amp;#039; might be accessed at non-zero index." verbose="The address of local variable &amp;#039;x&amp;#039; might be accessed at non-zero index." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.h" line="180" info="Address of variable taken here."/>
            <location file="include\IMGUI\imgui.h" line="180" info=""/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;Value&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;Value&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.h" line="1754"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;GlyphOffset&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;GlyphOffset&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.h" line="2124"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ImColor&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ImColor&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.h" line="1752"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ImColor&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ImColor&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.h" line="1754"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ImDrawList&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ImDrawList&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.h" line="1897"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.h" line="1260"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;size_in_bytes/(int)sizeof(unsigned int)&amp;#039; to function resize is always 2048" verbose="Argument &amp;#039;size_in_bytes/(int)sizeof(unsigned int)&amp;#039; to function resize is always 2048" sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.h" line="2032" info="Assignment &amp;#039;size_in_bytes=65536/8&amp;#039;, assigned value is 8192"/>
            <location file="include\IMGUI\imgui.h" line="2032" info="Argument &amp;#039;size_in_bytes/(int)sizeof(unsigned int)&amp;#039; to function resize is always 2048"/>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &amp;#039;PathBezierCurveTo&amp;#039; argument order different: declaration &amp;#039;p1, p2, p3, num_segments&amp;#039; definition &amp;#039;p2, p3, p4, num_segments&amp;#039;" verbose="Function &amp;#039;PathBezierCurveTo&amp;#039; argument order different: declaration &amp;#039;p1, p2, p3, num_segments&amp;#039; definition &amp;#039;p2, p3, p4, num_segments&amp;#039;" sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui.h" line="1935" info=""/>
            <location file="include\IMGUI\imgui_draw.cpp" line="923" info=""/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_internal.h" line="634"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_internal.h" line="796"/>
        </error>
        <error id="memsetClassFloat" severity="portability" msg="Using memset() on struct which contains a floating point number." verbose="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_internal.h" line="814"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;Size&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;Size&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_internal.h" line="655"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;CursorMaxPos&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;CursorMaxPos&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_internal.h" line="1216"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ImVec1&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ImVec1&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_internal.h" line="522"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ImRect&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ImRect&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_internal.h" line="534"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ImGuiTabBarRef&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ImGuiTabBarRef&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_internal.h" line="833"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ImGuiTabBarRef&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ImGuiTabBarRef&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_internal.h" line="834"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;ImGuiContext&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;ImGuiContext&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_internal.h" line="1038"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;begin&amp;#039;." verbose="Non-pure function: &amp;#039;begin&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_demo.cpp" line="1007"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;Color&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;Color&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_demo.cpp" line="4371"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;MyDocument&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;MyDocument&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_demo.cpp" line="4365"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_demo.cpp" line="1006"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_demo.cpp" line="3605"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;progress_dir&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;progress_dir&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_demo.cpp" line="1081"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;opt_reorderable&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;opt_reorderable&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_demo.cpp" line="4449"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;opt_fitting_flags&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;opt_fitting_flags&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_demo.cpp" line="4450"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;back&amp;#039;." verbose="Non-pure function: &amp;#039;back&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_draw.cpp" line="1118"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;ClipRectFullscreen&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;ClipRectFullscreen&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_draw.cpp" line="352"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;GlyphExtraSpacing&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;GlyphExtraSpacing&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_draw.cpp" line="1419"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;TexUvScale&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;TexUvScale&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_draw.cpp" line="1495"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;DisplayOffset&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;DisplayOffset&amp;#039; a value by passing the value to the constructor in the initialization list." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_draw.cpp" line="2466"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_draw.cpp" line="618"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_draw.cpp" line="809"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_draw.cpp" line="2002"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_draw.cpp" line="2119"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_rectpack.h" line="526"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_rectpack.h" line="527"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_rectpack.h" line="538"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_rectpack.h" line="539"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="4129"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;j&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;j&amp;#039; is reassigned a value before the old one has been used." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="3357" info=""/>
            <location file="include\IMGUI\imstb_truetype.h" line="3358" info=""/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;-&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="3069"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;offsize&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;offsize&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="1175"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;v&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;v&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="1200"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;endPtsOfContours&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;endPtsOfContours&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="1642"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="1785"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;straw&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;straw&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="2288"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="2289"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="2323"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;straw&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;straw&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="2324"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="2346"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;strawStart&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;strawStart&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="2347"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;strawEnd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;strawEnd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="2347"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="2396"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;strawStart&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;strawStart&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="2397"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;strawEnd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;strawEnd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="2397"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="2467"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;straw&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;straw&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="2468"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="3241"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="3262"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="3334"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="4334"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_truetype.h" line="4725"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;state!=NULL&amp;#039; is redundant or there is possible null pointer dereference: state." verbose="Either the condition &amp;#039;state!=NULL&amp;#039; is redundant or there is possible null pointer dereference: state." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_widgets.cpp" line="3501" info="Assuming that condition &amp;#039;state!=NULL&amp;#039; is not redundant"/>
            <location file="include\IMGUI\imgui_widgets.cpp" line="3513" info="Null pointer dereference"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_widgets.cpp" line="1348"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_widgets.cpp" line="1349"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_widgets.cpp" line="5782"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_widgets.cpp" line="6267"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_widgets.cpp" line="6268"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The expression &amp;#039;selected != was_selected&amp;#039; is always false because &amp;#039;selected&amp;#039; and &amp;#039;was_selected&amp;#039; represent the same value." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_widgets.cpp" line="5191" info="&amp;#039;was_selected&amp;#039; is assigned value &amp;#039;selected&amp;#039; here."/>
            <location file="include\IMGUI\imgui_widgets.cpp" line="5230" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_widgets.cpp" line="136"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_widgets.cpp" line="1192"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;style&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;style&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_widgets.cpp" line="2844"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;toggled&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;toggled&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_widgets.cpp" line="5195"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;g&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;g&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_widgets.cpp" line="5622"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;style&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;style&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_widgets.cpp" line="6169"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;TAB_UNSAVED_MARKER&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;TAB_UNSAVED_MARKER&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imgui_widgets.cpp" line="7043"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prev_x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prev_x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_textedit.h" line="400"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;k&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;k&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_textedit.h" line="401"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_textedit.h" line="1320"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here\012        for (int n = 0; n &amp;lt; 10; ++n) {\012            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here\012            do_something(&amp;amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." sinceDate="2019-07-02">
            <location file="include\IMGUI\imstb_textedit.h" line="1330"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Device::Clip&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Device::Clip&amp;#039; is not initialized in the constructor." sinceDate="2019-07-02">
            <location file="include\IMGUI_SDL\imgui_sdl.cpp" line="173"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;Device&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;Device&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." sinceDate="2019-07-02">
            <location file="include\IMGUI_SDL\imgui_sdl.cpp" line="173"/>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &amp;#039;e&amp;#039; shadows outer function" verbose="Local variable &amp;#039;e&amp;#039; shadows outer function" sinceDate="2019-07-02">
            <location file="include\GLM\glm\gtc\constants.hpp" line="121" info="Shadowed declaration"/>
            <location file="include\GLM\glm\detail\type_half.inl" line="37" info="Shadow variable"/>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &amp;#039;one&amp;#039; shadows outer function" verbose="Local variable &amp;#039;one&amp;#039; shadows outer function" sinceDate="2019-07-02">
            <location file="include\GLM\glm\gtc\constants.hpp" line="41" info="Shadowed declaration"/>
            <location file="include\GLM\glm\gtx\dual_quaternion.inl" line="245" info="Shadow variable"/>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &amp;#039;angle&amp;#039; shadows outer function" verbose="Local variable &amp;#039;angle&amp;#039; shadows outer function" sinceDate="2019-07-02">
            <location file="include\GLM\glm\gtc\quaternion.hpp" line="307" info="Shadowed declaration"/>
            <location file="include\GLM\glm\gtc\quaternion.inl" line="498" info="Shadow variable"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="error" msg="Shifting signed 32-bit value by 31 bits is undefined behaviour" verbose="Shifting signed 32-bit value by 31 bits is undefined behaviour" sinceDate="2019-07-02">
            <location file="include\GLM\glm\detail\type_half.inl" line="49"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="error" msg="Shifting signed 32-bit value by 31 bits is undefined behaviour" verbose="Shifting signed 32-bit value by 31 bits is undefined behaviour" sinceDate="2019-07-02">
            <location file="include\GLM\glm\detail\type_half.inl" line="77"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="error" msg="Shifting signed 32-bit value by 31 bits is undefined behaviour" verbose="Shifting signed 32-bit value by 31 bits is undefined behaviour" sinceDate="2019-07-02">
            <location file="include\GLM\glm\detail\type_half.inl" line="87"/>
        </error>
        <error id="shiftTooManyBitsSigned" severity="error" msg="Shifting signed 32-bit value by 31 bits is undefined behaviour" verbose="Shifting signed 32-bit value by 31 bits is undefined behaviour" sinceDate="2019-07-02">
            <location file="include\GLM\glm\detail\type_half.inl" line="104"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;Entry.f&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;Entry.f&amp;#039; is assigned a value that is never used." sinceDate="2019-07-02">
            <location file="include\GLM\glm\detail\type_half.inl" line="111"/>
        </error>
        <error id="virtualCallInConstructor" severity="warning" msg="Virtual function &amp;#039;start&amp;#039; is called from constructor &amp;#039;EndScene()&amp;#039; at line 11. Dynamic binding is not used." verbose="Virtual function &amp;#039;start&amp;#039; is called from constructor &amp;#039;EndScene()&amp;#039; at line 11. Dynamic binding is not used." sinceDate="2019-07-02">
            <location file="src\EndScene.cpp" line="11" info="Calling start"/>
            <location file="src\EndScene.h" line="19" info="start is a virtual function"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;draw&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;draw&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." sinceDate="2019-07-02">
            <location file="src\GameObject.h" line="34" info="Virtual function in base class"/>
            <location file="src\Scene.h" line="27" info="Function in derived class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;update&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;update&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." sinceDate="2019-07-02">
            <location file="src\GameObject.h" line="37" info="Virtual function in base class"/>
            <location file="src\Scene.h" line="28" info="Function in derived class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;clean&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;clean&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." sinceDate="2019-07-02">
            <location file="src\GameObject.h" line="40" info="Virtual function in base class"/>
            <location file="src\Scene.h" line="29" info="Function in derived class"/>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &amp;#039;operator*&amp;#039; argument order different: declaration &amp;#039;q, p&amp;#039; definition &amp;#039;p, o&amp;#039;" verbose="Function &amp;#039;operator*&amp;#039; argument order different: declaration &amp;#039;q, p&amp;#039; definition &amp;#039;p, o&amp;#039;" sinceDate="2019-07-02">
            <location file="include\GLM\glm\gtx\dual_quaternion.hpp" line="102" info=""/>
            <location file="include\GLM\glm\gtx\dual_quaternion.inl" line="166" info=""/>
        </error>
    </errors>
</results>
